{"version":3,"sources":["scripts/main.js"],"names":["Cell","value","GameField","field","cell","row","column","map","fRow","indexfRow","fCol","indexFCol","GameManager","score","start","win","lose","restart","prevField","emptySpots","checkEmptySpots","length","randomIndex","Math","floor","random","rowIndex","columnIndex","newCell","addCell","checkLose","forEach","iRow","col","iCol","push","strategy","JSON","parse","stringify","move","checkWin","newValue","some","UpMovement","currentGame","moveAndMerge","fillEmptySpaces","nextRow","updateScore","DownMovement","next","RightMovement","LeftMovement","GameView","cellsFieldView","document","querySelector","gameScoreView","messageLose","messageWin","cellsView","Object","values","children","fieldDate","rowField","rowFieldIndex","colField","colFieldIndex","cellDataValue","cellView","find","className","includes","insertAdjacentHTML","textContent","remove","classList","add","key","makeStep","gameManager","gameView","startButton","messageStart","addEventListener","createNewCell","render","restartGame","setTimeout","e","handleKeyPress","code","preventDefault"],"mappings":"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","file":"main.1384f62f.js","sourceRoot":"..\\src","sourcesContent":["/* eslint-disable max-len */\n'use strict';\n\nclass Cell {\n  constructor(value) {\n    this.value = value;\n  }\n}\n\nclass GameField {\n  constructor() {\n    this.field = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n  }\n\n  addCell(cell, row, column) {\n    this.field = this.field.map((fRow, indexfRow) => {\n      if (indexfRow === row) {\n        return fRow.map((fCol, indexFCol) => (indexFCol === column)\n          ? cell.value\n          : fCol\n        );\n      }\n\n      return fRow;\n    });\n  }\n}\n\nclass GameManager {\n  constructor() {\n    this.field = new GameField();\n    this.score = 0;\n    this.start = false;\n    this.win = false;\n    this.lose = false;\n    this.restart = false;\n    this.prevField = [];\n  }\n\n  createNewCell() {\n    const emptySpots = this.checkEmptySpots();\n\n    if (emptySpots.length === 0) {\n      this.checkLose();\n\n      return;\n    }\n\n    const randomIndex = Math.floor(Math.random() * emptySpots.length);\n    const [rowIndex, columnIndex] = emptySpots[randomIndex];\n    const startValue = () => (Math.floor(Math.random() * 11) >= 9) ? 4 : 2;\n    const newCell = new Cell(startValue());\n\n    if (this.start) {\n      this.field.addCell(newCell, rowIndex, columnIndex);\n    }\n  }\n\n  checkEmptySpots() {\n    const emptySpots = [];\n\n    this.field.field.forEach((row, iRow) => {\n      row.forEach((col, iCol) => {\n        if (col === 0) {\n          emptySpots.push([iRow, iCol]);\n        }\n      });\n    });\n\n    return emptySpots;\n  }\n\n  makeStep(strategy) {\n    this.prevField = JSON.parse(JSON.stringify(this.field.field));\n    strategy.move();\n    this.checkWin();\n  }\n\n  updateScore(newValue) {\n    this.score += newValue;\n  }\n\n  checkLose() {\n    if (this.checkEmptySpots().length === 0) {\n      const lose = this.field.field.some((row, iRow) => {\n        return !row.some((col, iCol) => iCol < 3\n          && (col === this.field.field[iRow][iCol + 1]\n          || this.field.field[iCol][iRow]\n              === this.field.field[iCol + 1][iRow]));\n      });\n\n      this.lose = lose;\n      this.start = !lose;\n    }\n  }\n\n  checkWin() {\n    const win = this.field.field.some(row => {\n      return row.some(cell => cell === 2048);\n    });\n\n    this.win = win;\n    this.start = !win;\n  }\n\n  restartGame() {\n    this.field = new GameField();\n    this.score = 0;\n    this.start = true;\n    this.win = false;\n    this.lose = false;\n    this.restart = true;\n    this.prevField = [];\n  }\n}\n\nclass UpMovement {\n  constructor(currentGame) {\n    this.currentGame = currentGame;\n    this.field = this.currentGame.field.field;\n  }\n\n  move() {\n    this.moveAndMerge();\n    this.fillEmptySpaces();\n  }\n\n  moveAndMerge() {\n    for (let col = 0; col < 4; col++) {\n      for (let row = 0; row < 3; row++) {\n        let nextRow = row + 1;\n\n        while (nextRow <= 3 && this.field[nextRow][col] === 0) {\n          nextRow++;\n        }\n\n        if (nextRow <= 3 && this.field[row][col] === this.field[nextRow][col]) {\n          this.field[row][col] *= 2;\n          this.field[nextRow][col] = 0;\n          this.currentGame.updateScore(this.field[row][col]);\n        }\n      }\n    }\n  }\n\n  fillEmptySpaces() {\n    for (let col = 0; col < 4; col++) {\n      let nextRow = 0;\n\n      for (let row = 0; row < 4; row++) {\n        if (this.field[row][col] !== 0) {\n          this.field[nextRow][col] = this.field[row][col];\n          nextRow++;\n        }\n      }\n\n      while (nextRow < 4) {\n        this.field[nextRow][col] = 0;\n        nextRow++;\n      }\n    }\n  }\n}\n\nclass DownMovement {\n  constructor(currentGame) {\n    this.currentGame = currentGame;\n    this.field = this.currentGame.field.field;\n  }\n\n  move() {\n    this.moveAndMerge();\n    this.fillEmptySpaces();\n  }\n\n  moveAndMerge() {\n    for (let iCol = 0; iCol < 4; iCol++) {\n      for (let iRow = 3; iRow >= 1; iRow--) {\n        let next = iRow - 1;\n\n        while (next >= 0 && this.field[next][iCol] === 0) {\n          next--;\n        }\n\n        if (next >= 0 && this.field[iRow][iCol] === this.field[next][iCol]) {\n          this.field[iRow][iCol] *= 2;\n          this.field[next][iCol] = 0;\n          this.currentGame.updateScore(this.field[iRow][iCol]);\n        }\n      }\n    }\n  }\n\n  fillEmptySpaces() {\n    for (let iCol = 0; iCol < 4; iCol++) {\n      let next = 3;\n\n      for (let iRow = 3; iRow >= 0; iRow--) {\n        if (this.field[iRow][iCol] !== 0) {\n          this.field[next][iCol] = this.field[iRow][iCol];\n          next--;\n        }\n      }\n\n      while (next >= 0) {\n        this.field[next][iCol] = 0;\n        next--;\n      }\n    }\n  }\n}\n\nclass RightMovement {\n  constructor(currentGame) {\n    this.currentGame = currentGame;\n    this.field = this.currentGame.field.field;\n  }\n\n  move() {\n    this.moveAndMerge();\n    this.fillEmptySpaces();\n  }\n\n  moveAndMerge() {\n    for (let iRow = 0; iRow < 4; iRow++) {\n      for (let iCol = 3; iCol >= 1; iCol--) {\n        let next = iCol - 1;\n\n        while (next >= 0 && this.field[iRow][next] === 0) {\n          next--;\n        }\n\n        if (next >= 0 && this.field[iRow][iCol] === this.field[iRow][next]) {\n          this.field[iRow][iCol] *= 2;\n          this.field[iRow][next] = 0;\n          this.currentGame.updateScore(this.field[iRow][iCol]);\n        }\n      }\n    }\n  }\n\n  fillEmptySpaces() {\n    for (let iRow = 0; iRow < 4; iRow++) {\n      let next = 3;\n\n      for (let iCol = 3; iCol >= 0; iCol--) {\n        if (this.field[iRow][iCol] !== 0) {\n          this.field[iRow][next] = this.field[iRow][iCol];\n          next--;\n        }\n      }\n\n      while (next >= 0) {\n        this.field[iRow][next] = 0;\n        next--;\n      }\n    }\n  }\n}\n\nclass LeftMovement {\n  constructor(currentGame) {\n    this.currentGame = currentGame;\n    this.field = this.currentGame.field.field;\n  }\n\n  move() {\n    this.moveAndMerge();\n    this.fillEmptySpaces();\n  }\n\n  moveAndMerge() {\n    for (let iRow = 0; iRow < 4; iRow++) {\n      for (let iCol = 0; iCol < 4 - 1; iCol++) {\n        let next = iCol + 1;\n\n        while (next < 4 && this.field[iRow][next] === 0) {\n          next++;\n        }\n\n        if (next < 4 && this.field[iRow][iCol] === this.field[iRow][next]) {\n          this.field[iRow][iCol] *= 2;\n          this.field[iRow][next] = 0;\n          this.currentGame.updateScore(this.field[iRow][iCol]);\n        }\n      }\n    }\n  }\n\n  fillEmptySpaces() {\n    for (let iRow = 0; iRow < 4; iRow++) {\n      let next = 0;\n\n      for (let iCol = 0; iCol < 4; iCol++) {\n        if (this.field[iRow][iCol] !== 0) {\n          this.field[iRow][next] = this.field[iRow][iCol];\n          next++;\n        }\n      }\n\n      while (next < 4) {\n        this.field[iRow][next] = 0;\n        next++;\n      }\n    }\n  }\n}\n\nclass GameView {\n  constructor(currentGame) {\n    this.currentGame = currentGame;\n    this.cellsFieldView = document.querySelector('.cells-field');\n    this.gameScoreView = document.querySelector('.game-score');\n    this.messageLose = document.querySelector('.message-lose');\n    this.messageWin = document.querySelector('.message-win');\n  }\n\n  render() {\n    const cellsView = Object.values(this.cellsFieldView.children);\n    const fieldDate = Object.values(this.currentGame.field)[0];\n\n    fieldDate.forEach((rowField, rowFieldIndex) => {\n      rowField.forEach((colField, colFieldIndex) => {\n        const cellDataValue = fieldDate[rowFieldIndex][colFieldIndex];\n        const cellView = cellsView.find(cell => cell.className\n          .includes(`cell-position--${rowFieldIndex}-${colFieldIndex}`));\n\n        if (!cellView && colField !== 0) {\n          this.cellsFieldView.insertAdjacentHTML('afterbegin', `\n            <div\n              class=\"cell cell--${colField} cell-position cell-position--${rowFieldIndex}-${colFieldIndex}\"\n            >\n              ${colField}\n            </div>\n          `);\n        }\n\n        if (cellView && +cellView.textContent !== cellDataValue) {\n          cellView.className = `cell cell--${cellDataValue} cell-position cell-position--${rowFieldIndex}-${colFieldIndex}`;\n          cellView.textContent = cellDataValue;\n        }\n\n        if (cellView && !cellDataValue) {\n          cellView.remove();\n        }\n      });\n    });\n\n    this.gameScoreView.textContent = this.currentGame.score;\n\n    if (this.currentGame.lose) {\n      this.messageLose.classList.remove('hidden');\n      this.start = false;\n    } else {\n      this.messageLose.classList.add('hidden');\n    }\n\n    if (this.currentGame.win) {\n      this.messageWin.classList.remove('hidden');\n      this.start = false;\n    } else {\n      this.messageWin.classList.add('hidden');\n    }\n  }\n\n  handleKeyPress(key) {\n    switch (key) {\n      case 'ArrowUp':\n        this.currentGame.makeStep(new UpMovement(this.currentGame));\n        break;\n      case 'ArrowDown':\n        this.currentGame.makeStep(new DownMovement(this.currentGame));\n        break;\n      case 'ArrowLeft':\n        this.currentGame.makeStep(new LeftMovement(this.currentGame));\n        break;\n      case 'ArrowRight':\n        this.currentGame.makeStep(new RightMovement(this.currentGame));\n        break;\n\n      default:\n        break;\n    }\n  }\n}\n\nconst gameManager = new GameManager();\nconst gameView = new GameView(gameManager);\n\nconst startButton = document.querySelector('.start');\nconst messageStart = document.querySelector('.message-start');\n\nstartButton.addEventListener('click', () => {\n  gameManager.start = true;\n\n  if (startButton.textContent === 'Start') {\n    messageStart.classList.add('hidden');\n    startButton.classList.add('restart');\n    startButton.classList.remove('start');\n    startButton.textContent = 'Restart';\n\n    gameManager.createNewCell();\n    gameManager.createNewCell();\n    gameView.render();\n  } else {\n    gameManager.restartGame();\n    gameView.render();\n\n    setTimeout(() => {\n      gameManager.createNewCell();\n      gameManager.createNewCell();\n      gameView.render();\n    }, 150);\n  }\n});\n\ndocument.addEventListener('keyup', (e) => {\n  if (gameManager.start\n    && ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'].includes(e.key)\n  ) {\n    gameView.handleKeyPress(e.key);\n    gameManager.checkLose();\n    gameView.render();\n\n    if (JSON.stringify(gameManager.prevField)\n      !== JSON.stringify(gameManager.field.field)\n    ) {\n      setTimeout(() => {\n        gameManager.createNewCell();\n        gameView.render();\n      }, 300);\n    }\n  }\n\n  if (e.code === 'NumpadEnter' || e.code === 'Space') {\n    e.preventDefault();\n  }\n});\n"]}